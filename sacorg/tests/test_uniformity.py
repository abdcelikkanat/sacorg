import unittest
import matplotlib.pyplot as plt
from sacorg.algorithms import simple, bipartite
from sacorg.utils import *


class Test(unittest.TestCase):

    def draw_hist(self, number_of_samples, samples, bin_count, method_name):
        histogram = {}
        for i in range(number_of_samples):
            key = repr(np.asarray(samples[i]))
            if key in histogram:
                histogram[key] += 1
            else:
                histogram[key] = 1

        values = []
        for key, value in enumerate(histogram.values()):
            for j in range(value):
                values.append(key)

        # Plot the histogram
        plt.hist(x=values, bins=bin_count)
        plt.xlabel("Graphs generated by using the method of " + str(method_name))
        plt.ylabel("Counts")
        plt.show()

    def test_mcmc_uniformity(self):

        # ------------------------------------------
        d1 = np.asarray([2, 2, 2, 2])
        d2 = np.asarray([2, 2, 2, 2, 2, 2, 2])
        d3 = np.asarray([3, 3, 3, 3, 3, 3])
        d4 = np.asarray([4, 4, 3, 3, 2, 2, 2])
        d5 = np.asarray([3, 2, 2, 1, 1, 1])
        # ------------------------------------------
        # Determine a sequence
        d = d4
        total = simple.count(deg_seq=d, method="C")
        number_of_samples = total*1000
        # ------------------------------------------

        samples = simple.get_sample(deg_seq=d, num_of_samples=number_of_samples, method="MCMC", verbose=True)
        self.draw_hist(number_of_samples, samples, total, "MCMC")

    def test_myalg_uniformity(self):

        # ------------------------------------------
        d1 = np.asarray([2, 2, 2, 2])
        d2 = np.asarray([2, 2, 2, 2, 2, 2, 2])
        d3 = np.asarray([3, 3, 3, 3, 3, 3])
        d4 = np.asarray([4, 4, 3, 3, 2, 2, 2])
        d5 = np.asarray([3, 2, 2, 1, 1, 1])
        # ------------------------------------------
        # Determine a sequence
        d = d4
        total = simple.count(deg_seq=d, method="C")
        number_of_samples = total*1000
        # ------------------------------------------

        samples = simple.get_sample(deg_seq=d, num_of_samples=number_of_samples, method="C", verbose=True)
        self.draw_hist(number_of_samples, samples, total, "MyAlg")

    def test_miller_harrison_uniformity(self):

        # ------------------------------------------
        p1 = np.asarray([2, 2, 2])
        q1 = np.asarray([2, 2, 2])

        p2 = np.asarray([4, 3, 3, 2, 2])
        q2 = np.asarray([4, 3, 3, 2, 2])
        # ------------------------------------------
        # Determine margin sequences
        p, q = p2, q2
        total = bipartite.count(deg_seq1=p, deg_seq2=q, method="MH")

        number_of_samples = total*1000
        # ------------------------------------------

        samples = bipartite.get_sample(deg_seq1=p, deg_seq2=q, num_of_samples=number_of_samples, method="MH", verbose=True)
        self.draw_hist(number_of_samples, samples, total, "Miller-Harrison")
